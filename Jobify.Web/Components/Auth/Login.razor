@page "/Auth/Login"
@using System.ComponentModel.DataAnnotations
@using Jobify.Api.DTOs
@using Jobify.Api.Service
@inject ApiService ApiService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>
<h3>Login</h3>

<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="LoginDto" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="LoginDto.Email" class="form-control" aria-required="true" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => LoginDto.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="LoginDto.Password" class="form-control" aria-required="true" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => LoginDto.Password" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
            </EditForm>
            @if (!string.IsNullOrEmpty(LoginError))
            {
                <p class="text-danger">@LoginError</p>
                <button class="btn btn-link" @onclick="SendResetEmail">Forgot password?</button>
            }
            <p class="mt-3">
                Don't have an account? <a href="/Auth/Register">Register here</a>.
            </p>
        </section>
    </div>
</div>

@code {
    private LoginDTO LoginDto { get; set; } = new LoginDTO();
    private string LoginError { get; set; } = "";

    private async Task LoginUser()
    {
        try
        {
            var response = await ApiService.LoginAsync(LoginDto);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/Auth/Users", forceLoad: false);
                Navigation.Refresh();
            }
            else
            {
                LoginError = "Invalid login credentials.";
            }
        }
        catch (Exception ex)
        {
            LoginError = $"Error: {ex.Message}";
        }
    }

    private async Task SendResetEmail()
    {
        try
        {
            await ApiService.SendPasswordResetEmailAsync(LoginDto.Email);
            LoginError = "Reset password email sent.";
        }
        catch (Exception ex)
        {
            LoginError = $"Error: {ex.Message}";
        }
    }
}
