@page "/Auth/Login"
@using System.ComponentModel.DataAnnotations
@using Jobify.Api.DTOs
@using Jobify.Api.Service
@inject IAccountApiService AccountApiService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>
@if (IsNavigating)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <h3>Login</h3>

    <div class="row">
        <div class="col-md-4">
            <section>
                <EditForm Model="LoginDto" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="LoginDto.Email" class="form-control" aria-required="true" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => LoginDto.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="LoginDto.Password" class="form-control" aria-required="true" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => LoginDto.Password" class="text-danger" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
                </EditForm>
                @if (!string.IsNullOrEmpty(LoginError))
                {
                    <p class="text-danger">@LoginError</p>
                    <button class="btn btn-link" @onclick="SendResetEmail">Forgot password?</button>
                }
                <p class="mt-3">
                    Don't have an account? <a href="/Auth/Register">Register here</a>.
                </p>
            </section>
        </div>
    </div>
}

@code {
    private LoginDTO LoginDto { get; set; } = new LoginDTO();
    private string LoginError { get; set; } = "";
    private bool IsNavigating { get; set; } = false;

    private async Task LoginUser()
    {
        try
        {
            var (token, role) = await AccountApiService.LoginAsync(LoginDto);
            IsNavigating = true;

            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);

            // switch (role)
            // {
            //     case "Admin":
            //         Navigation.NavigateTo("/Auth/Users");
            //         break;
            //     case "Student":
            //         Navigation.NavigateTo("/students/dashboard");
            //         break;
            //     case "Employer":
            //         Navigation.NavigateTo("/employers/dashboard");
            //         break;
            //     default:
            //         LoginError = "Invalid user role.";
            //         IsNavigating = false;
            //         return;
            // }
            Navigation.NavigateTo("/Firms");
            Navigation.Refresh();
        }
        catch 
        {
            LoginError = "Invalid login credentials.";
        }
    }

    private async Task SendResetEmail()
    {
        try
        {
            await AccountApiService.SendPasswordResetEmailAsync(LoginDto.Email);
            LoginError = "Reset password email sent.";
        }
        catch (Exception ex)
        {
            LoginError = $"Error: {ex.Message}";
        }
    }
}
