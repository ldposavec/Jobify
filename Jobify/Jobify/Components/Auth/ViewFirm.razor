@page "/Firms/View/{firmId:int}"
@using System.ComponentModel.DataAnnotations
@using Jobify.Api.DTOs
@using Jobify.Api.Service
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IAccountApiService AccountApiService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Firm Details</PageTitle>

<div class="container mt-4">
    @if (firm == null)
    {
        <div class="text-center mt-5">
            <p class="text-muted">Loading firm details...</p>
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                <h3>@firm.FirmName</h3>
                @if (firm.AverageGrade.HasValue)
                {
                    <span class="badge @(GetBadgeColor(firm.AverageGrade.Value)) fs-6">
                        @firm.AverageGrade.Value.ToString("0.0")
                    </span>
                }
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(firm.PictureBase64))
                {
                    <div class="text-center mb-3">
                        <img src="data:image/png;base64,@firm.PictureBase64" alt="@firm.FirmName Logo"
                             class="img-thumbnail" style="max-width: 500px; max-height: 500px;" />
                    </div>
                }
                else
                {
                    <div class="text-center mb-3">
                        <p class="text-muted fst-italic">No picture available for this firm.</p>
                    </div>
                }
                <div>
                    <p><strong>Firm Name:</strong> @firm.FirmName</p>
                    <p><strong>OIB:</strong> @firm.Oib</p>
                    <p><strong>Address:</strong> @firm.Address</p>
                    @if (!string.IsNullOrEmpty(firm.Industry))
                    {
                        <p><strong>Industry:</strong> @firm.Industry</p>
                    }
                    @if (!string.IsNullOrEmpty(firm.Description))
                    {
                        <p>@firm.Description</p>
                    }
                </div>
            </div>
        </div>

        <hr />
        <h4 class="mt-3">Reviews</h4>
        <div class="mb-3 text-end">
            <button class="btn btn-primary" @onclick="HandleAddReview">Add Review</button>
        </div>
        @if (reviews != null && reviews.Any())
        {
            <div class="list-group">
                @foreach (var review in reviews)
                {
                    <div class="list-group-item list-group-item-action mb-3 shadow-sm">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-1">User #@review.UserId</h5>
                            <span class="badge @(GetBadgeColor(review.Grade)) fs-5">
                                @review.Grade.ToString("0.0")
                            </span>
                        </div>
                        <p class="mb-1 mt-3">@review.Comment</p>
                        <div class="d-flex justify-content-end">
                            <small class="text-muted">Reviewed on: @review.CreatedAt?.ToString("dd.MM.yyyy.")</small>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted">No reviews available for this firm yet. Be the first to add one!</p>
        }
        <button class="btn btn-secondary mt-3" @onclick="GoBack">Back</button>
    }
</div>

@code {
    [Parameter] public int firmId { get; set; }
    private FirmDTO firm = null!;
    private List<ReviewDTO> reviews = new List<ReviewDTO>();

    protected override async Task OnInitializedAsync()
    {
        firm = await ApiService.GetByIdAsync<FirmDTO>(firmId);
        reviews = await ApiService.GetItemsByFirmIdAsync<ReviewDTO>(firmId);
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/Firms");
    }

    private string GetBadgeColor(double grade)
    {
        if (grade >= 4.0) return "bg-success";
        if (grade >= 2.5) return "bg-warning";
        return "bg-danger";
    }

    private async Task HandleAddReview()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", new object[] { "authToken" });
        if (!string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo($"/Reviews/Create/{firmId}");
            Navigation.Refresh();
        }
        else
        {
            Navigation.NavigateTo("Auth/Login");
            Navigation.Refresh();
        }
    }
}
