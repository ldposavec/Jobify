@page "/user/internship-offers"
@using Jobify.BL.Providers
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h3 class="text-center my-4">Job Offers</h3>

@if (jobOffers == null || jobOffers.Count == 0)
{
    <div class="alert alert-info text-center" role="alert">
        No job offers available at the moment.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr style="font-size: 1.2rem;">
                    <th class="text-center">Job Title</th>
                    <th class="text-center">Company</th>
                    <th class="text-center">Salary</th>
                    <th class="text-center">Actions</th>
                    <th class="text-center">Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in jobOffers)
                {
                    <tr style="font-size: 1.1rem; height: 70px;">
                        <td class="text-center">@job.Title</td>
                        <td class="text-center">@job.Employer.Firm.FirmName</td>
                        <td class="text-center">@job.Salary <span>€/h</span></td>
                        <td class="text-center">
                            <button class="btn btn-info btn-lg me-2" @onclick="() => ViewJobDetails(job)">Details</button>
                            @if (job.Status?.Id == 3)
                            {
                                <button class="btn btn-warning btn-lg" @onclick="() => EditJobApplication(job)">Edit</button>
                            }
                        </td>
                        <td class="text-center">
                            @if (checkStatus(job))
                            {
                                @jobApps.Find(x => x.JobAdId == job.Id).Status.Name
                            }
                            else
                            {
                                @job.Status.Name
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (ShowModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@SelectedJob?.Title</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowModal = false"></button>
                </div>
                <div class="modal-body" style="font-size: 1.1rem; max-height: 50vh; overflow-y: auto;">
                    <p><strong>Employer:</strong> @SelectedJob?.Employer.Firm.FirmName</p>
                    <p><strong>Description:</strong> @SelectedJob?.Description</p>
                    <p><strong>Salary:</strong> @SelectedJob?.Salary <span>€/h</span></p>
                    <hr />
                    <p><em>Attach your CV before applying:</em></p>
                    <div class="form-group">
                        <label for="pdfUpload">Attach PDF:</label>
                        <InputFile OnChange="HandlePdfUpload" accept=".pdf" />
                    </div>
                    @if (!string.IsNullOrEmpty(UploadedFileName))
                    {
                        <p class="mt-2"><strong>Uploaded File:</strong> @UploadedFileName</p>
                    }
                </div>
                <div class="modal-footer">
                    @if (SelectedJob.StatusId == 3)
                    {
                        <button class="btn btn-success btn-lg" disabled>Apply</button>
                        <button class="btn btn-secondary btn-lg" @onclick="() => ShowModal = false">Close</button>
                        <p class="text-danger mt-2"><strong>You already applied for this position!</strong></p>
                    }
                    else
                    {
                        <button class="btn btn-success btn-lg" @onclick="ConfirmApply">Apply</button>
                        <button class="btn btn-secondary btn-lg" @onclick="() => { ShowModal = false; UploadedFileName = null; }">Close</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (ShowEditModal)
{
    <div class="modal-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center;">
        <div class="modal-content" style="background: white; padding: 20px; border-radius: 8px; max-width: 600px; width: 100%; max-height: 80vh; overflow-y: auto;">
            <h4>@SelectedJobApp.JobAd.Title</h4>
            <p><strong>Employer:</strong> @SelectedJobApp.JobAd.Employer.Firm.FirmName</p>
            <p><strong>Salary:</strong> @SelectedJobApp.JobAd.Salary <span>€/h</span></p>

            <p>
                <strong>Existing CV file:</strong>
                <a href="@SelectedJobApp.CvFilepath" target="_blank">@SelectedJobApp.CvFilepath.Substring(SelectedJobApp.CvFilepath.IndexOf('_') + 1)</a>
            </p>

            <p class="mt-3"><strong>Upload a new CV:</strong></p>
            <div class="form-group">
                <InputFile OnChange="HandlePdfUpload" accept=".pdf" />
            </div>
            <div class="mt-4 d-flex justify-content-start">
                <button class="btn btn-success me-2" @onclick="SaveChanges">Save Changes</button>
                <button class="btn btn-danger me-2" @onclick="ConfirmAndDeleteApplication">Delete Application</button>
            </div>
            <div class="mt-4 d-flex flex-row-reverse">
                <button class="btn btn-secondary" @onclick="() => ShowEditModal = false">Cancel</button>
            </div>
        </div>
    </div>
}

@if (ShowConfirmationModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowConfirmationModal = false"></button>
                </div>
                <div class="modal-body" style="font-size: 1.1rem;">
                    <p>@ConfirmationMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="() => { ShowConfirmationModal = false; ConfirmationAction?.Invoke(); }">Confirm</button>
                    <button class="btn btn-secondary" @onclick="() => ShowConfirmationModal = false">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<JobAd> jobOffers { get; set; }
    private List<JobApp> jobApps { get; set; }
    private JobAd? SelectedJob { get; set; }
    private bool ShowModal { get; set; } = false;
    private string? UploadedFileName { get; set; }
    private string? filePath { get; set; }
    private JobApp jobApp { get; set; }

    private JobApp? SelectedJobApp { get; set; }
    private bool ShowEditModal { get; set; } = false;

    private bool ShowConfirmationModal { get; set; }
    private string ConfirmationMessage { get; set; }
    private Action? ConfirmationAction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        GetJobOffers();
    }

    private void GetJobOffers()
    {
        jobOffers = DbQueryProvider.Service.GetAllJobAds();
        jobApps = DbQueryProvider.Service.GetAllJobApps();
    }

    private async Task HandlePdfUpload(InputFileChangeEventArgs e)
    {
        if (File.Exists(SelectedJobApp?.CvFilepath)) File.Delete(SelectedJobApp?.CvFilepath);

        var file = e.File;
        if (file != null)
        {
            var uploadsFolder = Path.Combine(Environment.CurrentDirectory, "UploadedFiles");
            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
            var _filePath = Path.Combine(uploadsFolder, uniqueFileName);

            filePath = _filePath;

            UploadedFileName = uniqueFileName;

            using (var fileStream = new FileStream(_filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }
        }
    }

    private void ViewJobDetails(JobAd job)
    {
        SelectedJob = job;
        ShowModal = true;
    }

    private void ConfirmApply()
    {
        if (string.IsNullOrEmpty(UploadedFileName))
        {
            ConfirmationMessage = "Please attach your CV before applying.";
            ConfirmationAction = null;
            ShowConfirmationModal = true;
        }
        else
        {
            ConfirmationMessage = $"Are you sure you want to apply for the job: {SelectedJob?.Title}?";
            ConfirmationAction = ApplyForJob;
            ShowConfirmationModal = true;
        }
    }

    private void ApplyForJob()
    {
        SelectedJob.Status = DbQueryProvider.Service.GetAllStatuses().First(status => status.Id == 3);
        DbQueryProvider.Service.UpdateJobAd(SelectedJob);

        DbQueryProvider.Service.AddNewJobApp(SelectedJob.Id, 2, DateTime.Now, filePath, SelectedJob.Status.Id);

        UploadedFileName = null;
        ShowModal = false;

        ConfirmationMessage = $"You have successfully applied for the job: {SelectedJob?.Title}";
        ConfirmationAction = null;
        ShowConfirmationModal = false;
    }

    private void EditJobApplication(JobAd job)
    {
        // SelectedJobApp = DbQueryProvider.Service.GetJobApp(job.Id);
        SelectedJobApp = DbQueryProvider.Service.GetAllJobApps().Find(x => x.JobAdId == job.Id);
        ShowEditModal = true;
    }

    private void SaveChanges()
    {
        if (SelectedJobApp != null)
        {
            if (!string.IsNullOrEmpty(filePath))
            {
                SelectedJobApp.CvFilepath = filePath;
            }

            DbQueryProvider.Service.UpdateJobApp(SelectedJobApp);
            JSRuntime.InvokeVoidAsync("alert", "Changes saved successfully!");
        }

        ShowEditModal = false;
    }

    private async Task ConfirmAndDeleteApplication()
    {
        ConfirmationMessage = "Are you sure you want to delete this application?";
        ConfirmationAction = DeleteApplication;
        ShowConfirmationModal = true;
    }

    private void DeleteApplication()
    {
        if (SelectedJobApp != null)
        {
            if (File.Exists(SelectedJobApp.CvFilepath)) File.Delete(SelectedJobApp.CvFilepath);

            SelectedJobApp.StatusId = 4;
            DbQueryProvider.Service.UpdateJobApp(SelectedJobApp);
            DbQueryProvider.Service.DeleteJobApp(SelectedJobApp.Id);

            SelectedJobApp.JobAd.Status = DbQueryProvider.Service.GetAllStatuses().First(status => status.Id == 4);
            DbQueryProvider.Service.UpdateJobAd(SelectedJobApp.JobAd);

            ShowEditModal = false;

            ConfirmationMessage = "Application deleted successfully!";
            ConfirmationAction = null;
            ShowConfirmationModal = false;
        }
    }

    private bool checkStatus(JobAd jobAd) {

        if (jobApps.Find(x => x.JobAdId == jobAd.Id) != null)
        {
            return true;
        }

        return false;
    }
}
