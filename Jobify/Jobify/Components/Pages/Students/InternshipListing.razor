@page "/students/internship-listing"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Jobify.BL.Enums
@using Jobify.BL.Providers
@using Jobify.BL.Repositories

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="4000" StackLength="3" Placement="ToastsPlacement.BottomRight" />
<ConfirmDialog @ref="dialog" />

<h3>Internship Listing</h3>

@if (jobAds == null)
{
    <p>Loading job ads...</p>
}
else if (jobAds.Count == 0)
{
    <p>No job ads found.</p>
}
else
{
    @* <div class="row">
        @foreach (var job in jobAds.Where(j => j.StatusId == 4))
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">@job.Title</h4>
                        <p class="card-text">@job.Description</p>
                        <p class="card-text"><strong>Salary:</strong> @job.Salary€</p>
                        <button class="btn btn-primary" @onclick="() => ApplyForJob(job.Id)">Apply</button>
                    </div>
                </div>
            </div>
        }
    </div> *@
    <div class="card-deck">
        <div class="row">
    @foreach (var job in jobAds.Where(j => j.StatusId == 4))
    {
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@job.Title</h5>
                    <p class="card-text">
                        @TruncateText(job.Description, 25)
                        <button class="btn btn-outline-warning" @onclick="() => OpenDescriptionModal(job.Description)">
                            Read More
                        </button>
                    </p>
                    <hr />
                    <p class="card-text"><strong>Salary:</strong> @job.Salary€</p>
                    <button class="btn btn-primary" @onclick="() => ShowJobDetails(job)">Apply</button>
                </div>
                <div class="card-footer">
                    <small class="text-muted">@GetTimeSinceUpload(job.Id)</small>
                </div>
            </div>
        </div>
    }
        </div>
    </div>
}


<div class="modal fade @(isModalVisible ? "show d-block" : "")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedJob?.Title</h5>
                <button type="button" class="btn-close" @onclick="HideModal"></button>
            </div>
            <div class="modal-body">
                <p>@selectedJob?.Description</p>

                <p><strong>Salary:</strong> @selectedJob?.Salary €</p>
                <hr />
                <label for="cvUpload">Upload your CV (PDF):</label>
                <InputFile id="cvUpload" OnChange="HandleFileUpload" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="ApplyForJob">Submit Application</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(isDescriptionModalVisible ? "show d-block" : "")" id="descriptionModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Job Description</h5>
                <button type="button" class="close" @onclick="CloseDescriptionModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="white-space: pre-line">
                <p>@fullJobDescription</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDescriptionModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    private ConfirmDialog dialog = default!;

    private List<JobAd> jobAds = new List<JobAd>();
    private JobApp jobApp;
    private JobAd? selectedJob = null;
    private bool isModalVisible = false;
    private string? uploadedCvPath = null;
    private int id = 2;
    private static string uploadPath = "wwwroot/uploads/cv";
    private bool isDescriptionModalVisible = false;
    private string fullJobDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        LoadJobAds();
    }

    private void LoadJobAds()
    {
        jobAds = DbQueryProvider.Service.GetAllJobAds();
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title = null) => new ToastMessage
        {
            Type = toastType,
            Title = title,
            Message = $"{message}{Environment.NewLine}{DateTime.Now}",
        };

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(text)) return string.Empty;
        return text.Length > maxLength ? $"{text.Substring(0, maxLength)}..." : text;
    }

    private void OpenDescriptionModal(string description)
    {
        fullJobDescription = description;
        isDescriptionModalVisible = true;
    }

    private void CloseDescriptionModal()
    {
        isDescriptionModalVisible = false;
        fullJobDescription = string.Empty;
    }

    private void ShowJobDetails(JobAd job)
    {
        selectedJob = job;
        isModalVisible = true;
    }

    private void HideModal()
    {
        isModalVisible = false;
        selectedJob = null;
        uploadedCvPath = null;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file.ContentType == "application/pdf")
        {
            try
            {
                Directory.CreateDirectory(uploadPath);
                var filePath = Path.Combine(uploadPath, file.Name);
                using var stream = new FileStream(filePath, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(stream);
                uploadedCvPath = filePath;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                messages.Add(CreateToastMessage(ToastType.Danger, "An error occurred while uploading your CV. Please try again."));
            }
        }
        else
        {
            messages.Add(CreateToastMessage(ToastType.Danger, "Please upload a valid PDF file."));
        }
    }

    private async Task ApplyForJob()
    {
        if (selectedJob == null || uploadedCvPath == null)
        {
            messages.Add(CreateToastMessage(ToastType.Danger, "Please upload your CV before submitting."));
            return;
        }

        var jobApp = new JobApp()
            {
                JobAdId = selectedJob.Id,
                StudentId = id,
                CreatedAt = DateTime.Now,
                CvFilepath = uploadedCvPath,
                StatusId = (int)StatusEnum.Pending
            };

        DbQueryProvider.Service.AddNewJobApp(selectedJob.Id, id, DateTime.Now, uploadedCvPath, (int)StatusEnum.Pending);
        // await JSRuntime.InvokeVoidAsync("alert", $"You have successfully applied for job with ID {selectedJob.Id}!");
        messages.Add(CreateToastMessage(ToastType.Success, "You have successfully applied for the job!"));
        HideModal();
    }

    private string GetTimeSinceUpload(int jobId)
    {
        var jobAd = DbQueryProvider.Service.GetJobAdById(jobId);
        var timeSinceUpload = DateTime.Now - jobAd.CreatedAt;
        if (timeSinceUpload is null)
            return "Unknown";
        else if (timeSinceUpload.Value.Days == 0)
            if (timeSinceUpload.Value.Minutes == 0)
                return "Posted just now";
            else if (timeSinceUpload.Value.Minutes == 1)
                return "Posted 1 minute ago";
            else
                return $"Posted {timeSinceUpload.Value.Minutes} minutes ago";
        else if (timeSinceUpload.Value.Days == 1)
            return $"Posted yesterday";
        else
            return $"Posted {timeSinceUpload.Value.Days} days ago";
    }

}
