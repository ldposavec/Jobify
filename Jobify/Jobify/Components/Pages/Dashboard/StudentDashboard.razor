@page "/students/dashboard"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@using Jobify.BL.Providers
@using Jobify.BL.Repositories
@* @using Blazorise *@

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="4000" StackLength="3" Placement="ToastsPlacement.BottomRight" />
<ConfirmDialog @ref="dialog" />

<h3>StudentDashboard</h3>
<div class="container">
    <div class="row">
        <div class="col-12">
            <h4>My Applications</h4>
            @if (jobApps == null)
            {
                <p>Loading job applications...</p>
            }
            else if (jobApps.Count == 0)
            {
                <p>No job applications found.</p>
            }
            else if (jobApps.Count == 0 && jobApps.Find(x => x.StatusId == 1) == null)
            {
                <p style="padding-bottom: 50px">No pending applications!</p>
            }
            else
            {
                <div class="card-deck">
                    <div class="row">
                        @foreach (var job in jobApps)
                        {
                            @if (job.StatusId == 3 || job.StatusId == 2 || !jobAccepted) {

                                <div class="col-md-3 mb-3">
                                    <div class="card">
                                        <div class="card-body text-center">
                                            <div class="d-flex justify-content-around">
                                                <h5 class="card-title mt-2">@GetJobAdTitle(job.JobAdId)</h5>
                                                @StatusToString(job.StatusId)
                                            </div>
                                            <hr />
                                            <p class="card-text"><strong>Salary:</strong> @GetSalary(job.JobAdId)€</p>
                                            <div class="d-flex justify-content-around">
                                                @* <ConfirmDialog @ref="dialog" /> *@
                                                @if (job.StatusId == (int)StatusEnum.Approved)
                                                {
                                                    <button class="btn btn-primary m-1" @onclick="() => AcceptApplication(job.Id)">Accept</button>
                                                    @* <Button Color="ButtonColor.Primary" @onclick="() => AcceptApplication(job.Id)">Accept</Button> *@
                                                }
                                                <button class="btn btn-primary m-1" @onclick="() => CancelApplication(job)">Opt out</button>
                                            </div>
                                        </div>
                                        @* <div class="card-footer">
                                        <small class="text-muted">@GetTimeSinceUpload(job.Id)</small>
                                    </div> *@
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                @* <table class="table">
                    <thead>
                        <tr>
                            <th>Job Title</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var jobApp in jobApps)
                        {
                            <tr>
                                <td>@GetJobAdTitle(jobApp.JobAdId)</td>
                                <td>@jobApp.StatusId</td>
                                <td><button class="btn btn-primary" @onclick="() => CancelApplication(jobApp.Id)">Cancel</button></td>
                            </tr>
                        }
                    </tbody>
                </table> *@
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <h4>Accepted Applications</h4>
            @if (jobOffers == null)
            {
                <p>Loading job offers...</p>
            }
            else if (jobOffers.Count == 0)
            {
                <p>No job offers found.</p>
            }
            else
            {
                <div class="card-deck">
                    <div class="row">
                        @foreach (var job in jobOffers)
                        {
                            @if (job.StatusId == 1 && jobAccepted) {

                                <div class="col-md-3 mb-3">
                                    <div class="card">
                                        <div class="card-body text-center">
                                            <div class="d-flex justify-content-around">
                                                <h5 class="card-title mt-2">@GetJobAdTitle(GetJobAdId(job.Id))</h5>
                                                @StatusToString(job.StatusId)
                                            </div>
                                            <hr />
                                            <p class="card-text"><strong>Salary:</strong> @GetSalary(GetJobAdId(job.Id))€</p>
                                            <div class="d-flex justify-content-around">
                                                <button class="btn btn-primary m-1" @onclick="() => CancelApplication(job)">Opt out</button>
                                            </div>
                                        </div>
                                        @* <div class="card-footer">
                                        <small class="text-muted">@GetTimeSinceUpload(job.Id)</small>
                                    </div> *@
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                @* <table class="table">
                    <thead>
                        <tr>
                            <th>Job Title</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var jobApp in jobApps)
                        {
                            <tr>
                                <td>@GetJobAdTitle(jobApp.JobAdId)</td>
                                <td>@jobApp.StatusId</td>
                                <td><button class="btn btn-primary" @onclick="() => CancelApplication(jobApp.Id)">Cancel</button></td>
                            </tr>
                        }
                    </tbody>
                </table> *@
            }
        </div>
    </div>
</div>

@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    private ConfirmDialog dialog = default!;

    private List<JobApp> jobApps = new List<JobApp>();
    private List<JobApp> jobOffers = new List<JobApp>();
    private JobAd jobAd;
    private JobApp jobApp;
    private int id = 2;
    private JobAd SelectedJob { get; set; }
    private JobApp SelectedJobApp { get; set; }

    private bool jobAccepted = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadJobApps();
        LoadAcceptedApplications();
    }

    private async Task LoadJobApps() 
    {
        jobApps = await DbQueryProvider.Service.GetAllJobAppsByStudentId(id);
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message, string title = null) => new ToastMessage
        {
            Type = toastType,
            Title = title,
            Message = $"{message}{Environment.NewLine}{DateTime.Now}",
        };

    private async Task CancelApplication(JobApp job)
    {
        var isConfirmed = await dialog.ShowAsync(
            title: "Cancel Job Application",
            message1: "Are you sure you want to cancel this job application?"
        );
        if (isConfirmed)
        {

            if (File.Exists(job.CvFilepath)) File.Delete(job.CvFilepath);

            SelectedJobApp = job;
            SelectedJobApp.StatusId = 4;
            DbQueryProvider.Service.UpdateJobApplication(SelectedJobApp);

            DbQueryProvider.Service.DeleteJobApplication(job.Id);

            SelectedJob = job.JobAd;
            SelectedJob.StatusId = job.StatusId;

            DbQueryProvider.Service.UpdateJobAd(SelectedJob);
            
            messages.Add(CreateToastMessage(ToastType.Success, "Job application cancelled successfully!"));
            await LoadJobApps();
            LoadAcceptedApplications();
        }
        else
        {
            messages.Add(CreateToastMessage(ToastType.Danger, "Job application cancellation cancelled!"));
        }
    }

    private async Task AcceptApplication(int id)
    {
        var isConfirmed = await dialog.ShowAsync(
            title: "Accept Job Application",
            message1: "Are you sure you want to accept this job application?"
        );
        if (isConfirmed)
        {
            var job = DbQueryProvider.Service.GetJobAppById(id);
            DbQueryProvider.Service.AddNewJobOffer(job.Id, DateTime.Now, job.StatusId);
            messages.Add(CreateToastMessage(ToastType.Success, "Job application accepted successfully!"));
            jobAccepted = true;
        }
        else
        {
            messages.Add(CreateToastMessage(ToastType.Danger, "Job application acceptance cancelled!"));
        }
        LoadAcceptedApplications();
    }

    private void LoadAcceptedApplications()
    {
        jobOffers = DbQueryProvider.Service.GetAllJobApps();
    }

    private string GetJobAdTitle(int id)
    {
        try
        {
            jobAd = DbQueryProvider.Service.GetJobAdById(id);
            if (jobAd is not null) return jobAd.Title;
            else return "N/A";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return "N/A";
        }
    }

    private decimal GetSalary(int id)
    {
        try
        {
            jobAd = DbQueryProvider.Service.GetJobAdById(id);
            if (jobAd is not null) return jobAd.Salary;
            else return 0;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return 0;
        }
    }

    private MarkupString StatusToString(int id)
    {
        var status = DbQueryProvider.Service.GetStatusById(id).Name;
        if (id == (int)StatusEnum.Pending)
            return (MarkupString)$"<button class=\"btn btn-primary\" disabled>{status}</button>";
        else if (id == (int)StatusEnum.Approved)
            return (MarkupString)$"<button class=\"btn btn-success\" disabled>{status}</button>";
        else if (id == (int)StatusEnum.Denied)
            return (MarkupString)$"<button class=\"btn btn-danger\" disabled>{status}</button>";
        else
            return (MarkupString)$"<button class=\"btn btn-warning\" disabled>Error</button>";
    }

    private int GetJobAdId(int id)
    {
        int? returnValue = 0;
        try
        {
            if (DbQueryProvider.Service.GetJobAppById(id) is not null)
                returnValue = DbQueryProvider.Service.GetJobAppById(id).JobAdId;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        if (returnValue is null) return 0;
        else return (int)returnValue;
    }
}
